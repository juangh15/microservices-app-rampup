# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs 
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test-users-api:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:8.0.345
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests -f ./users-api clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn -f ./users-api test
#      - store_artifacts:
#          path: ./users-api/target/users-api-0.0.1-SNAPSHOT.jar
#          destination: users-api-artifact
  build-and-test-auth-api:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/go:1.17
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Go Init
          command: cd ./auth-api && go mod init github.com/bortizf/microservice-app-example/tree/master/auth-api
      # Then run your tests!
      - run:
          name: Go Tidy
          command: cd ./auth-api && go mod tidy 
      - run:
          name: Go Build
          command: cd ./auth-api && go build
#      - store_artifacts:
#          path: ./auth-api/auth-api
#          destination: auth-api-artifact
  gather-and-store-artifacts:
    docker:
      - image: cimg/base:edge-20.04
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: Get Log Message Processor Script
          command: mkdir -p /home/circleci/project/artifacts/log-message-processor/ && mv /home/circleci/project/log-message-processor/main.py /home/circleci/project/artifacts/log-message-processor/main.py
      - run:
          name: Get Users API Artifact
          command: mkdir -p /home/circleci/project/artifacts/users-api/ && mv /home/circleci/project/users-api/target/users-api-0.0.1-SNAPSHOT.jar /home/circleci/project/artifacts/users-api/users-api-0.0.1-SNAPSHOT.jar
      - run:
          name: Get Auth API Artifact
          command: mkdir -p /home/circleci/project/artifacts/auth-api/ && mv /home/circleci/project/auth-api/auth-api /home/circleci/project/project/artifacts/auth-api/auth-api
      - run:
          name: Get ToDos API Artifact
          command: mkdir -p /home/circleci/project/artifacts/todos-api && mv /home/circleci/project/todos-api /home/circleci/project/project/artifacts/todos-api
      - run: 
          name: Compress Artifacts
          command: tar -czvf /home/circleci/project/all_artifacts.tar.gz /home/circleci/project/artifacts
      - store_artifacts:
          path: /home/circleci/project/all_artifacts.tar.gz
          destination: all_artifacts.tar.gz
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test-users-api
      - build-and-test-auth-api
      - gather-and-store-artifacts

